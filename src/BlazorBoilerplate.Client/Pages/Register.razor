@page "/register"
@layout LoginLayout
@inject IUriHelper uriHelper
@inject AuthenticationState state

@*TODO: Add client-side validation*@

<MatCard>
    <div class="logo">
        <img src="images/blazorboilerplate.svg" style="width:100px;" /><br/>Blazor Boilerplate
        <br />
        <h4>Create Account</h4>
    </div>

    <fieldset>
        <div class="form-group">
            <MatTextField bind-value="@registerParameters.UserName" Label="Username" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
        </div>
        <div class="form-group">
            <MatTextField bind-value="@registerParameters.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
        </div>
        <div class="form-group">
            <MatTextField bind-value="@registerParameters.PasswordConfirm" Label="Password Confirmation" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
        </div>
        <div class="form-group d-flex justify-content-end">
            <MatButton OnClick="@SubmitCreate" Raised="true">Create account</MatButton>
        </div>
        @if (@error.Length > 0)
        {
            <BlazorMessageAlert Message="@error" Dismissible="true" Type="AlertType.Danger"></BlazorMessageAlert>
        }
        <hr />

        <NavLink href="login">
            <h6 class="font-weight-normal text-center">Already have an account? Click here to login</h6>
        </NavLink>
    </fieldset>
</MatCard>

@functions{

    RegisterParameters registerParameters { get; set; } = new RegisterParameters();
    string error { get; set; }  = "";

    async Task SubmitCreate()
    {
        try
        {
            error = "";
            await state.Register(registerParameters);
            uriHelper.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = "User Creation failed: "  + ex.Message;
        }
    }
}
