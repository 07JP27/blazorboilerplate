@page "/admin/users"
@attribute [Authorize]
@inject HttpClient Http
@inject IdentityAuthenticationStateProvider authStateProvider
@inject IMatToaster matToaster
@inject AppState appState

<h1>Users</h1>
<p>User management Screen. Mostly Functional, still under construction</p>
<MatButton Raised="true" TrailingIcon="add_group" OnClick="@(e => { this.newRoleDialogOpen = true; })" Label="Add Role" />

@if (users == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>Loading Users</label>
    </LoadingBackground>
}
else
{
    <MatTable Class="mat-elevation-z5" Items="@users" LoadInitialData="true" Striped="true" RequestApiOnlyOnce="true" ApiUrl="api/users"
              DebounceMilliseconds="150">
        <MatTableHeader>
            <th><MatButton Icon="person_add" Label="New User" OnClick="@(e => { creationDialogOpen = true; })"></MatButton></th>
            <th>User Name</th>
            <th>Email</th>
            <th>Roles</th>
        </MatTableHeader>
        <MatTableRow Context="UserRow">
            <td>
                <div style="width:130px;">
                    <MatIconButton Icon="edit" OnClick="@(() => OpenEditDialog(UserRow.UserId))"></MatIconButton>
                    <MatIconButton Icon="delete" OnClick="@(() => Delete(UserRow.UserId))" Disabled="@(UserRow.UserId == userProfile.UserId)" ></MatIconButton>
                </div>
            </td>
            <td><div style="width:130px;">@UserRow.UserName</div></td>
            <td>@UserRow.Email</td>
            <td>
                <MatChipSet>
                    @foreach (var role in @UserRow.Roles)
                        {
                        <MatChip Label="@role"></MatChip>
                        }
                </MatChipSet>
            </td>
        </MatTableRow>
    </MatTable>
}

<MatDialog @bind-IsOpen="@creationDialogOpen">
    <MatDialogTitle>Create User</MatDialogTitle>
    <MatDialogContent>
        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="@registerParameters.UserName" Label="User Name" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@registerParameters.Email" Label="Email" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@registerParameters.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@registerParameters.PasswordConfirm" Label="Password Confirmation" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>
        </fieldset>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { creationDialogOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@CreateUser">Create User</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@editDialogOpen">
    <MatDialogTitle>Edit User</MatDialogTitle>
    <MatDialogContent>
        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="@user.UserName" Label="User Name" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@user.Email" Label="Email" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true" Type="mail"></MatTextField>
            </div>
            <MatChipSet>
                @foreach (var role in roleSelections.OrderBy(x => x.Name))
                {
                    <MatChip Label="@role.Name" LeadingIcon="@( (role.Selected) ? "done" : "")" @onclick="@(()=>UpdateChipContactGroups(role))" />
                }
            </MatChipSet>
        </fieldset>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { editDialogOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@(e => { confirmDialogOpen = true; })">Modify User</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@confirmDialogOpen" Style="z-index:100">
    <MatDialogTitle>Confirm</MatDialogTitle>
    <MatDialogContent>
        <p>
            <strong>
                Confirm Action?
            </strong>
        </p>
    </MatDialogContent>
    <MatButton OnClick="@(() => ConfirmAction() )">Proceed</MatButton>
    <MatButton OnClick="@(e => { confirmDialogOpen = false; deleteUser = false; })">Cancel</MatButton>
</MatDialog>

<MatDialog @bind-IsOpen="@newRoleDialogOpen">
    <MatDialogTitle>
        Add New Role
    </MatDialogTitle>
    <MatDialogContent>
        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="@newRoletoAdd" Label="New Role to Add" Icon="add" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
        </fieldset>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { newRoleDialogOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@CreateRole">Add Role</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    int pageSize { get; set; } = 15;
    int currentPage { get; set; } = 0;

    bool creationDialogOpen = false;
    bool editDialogOpen = false;
    bool confirmDialogOpen = false;
    bool deleteUser = false;
    bool newRoleDialogOpen = false;

    ApiResponseDto apiResponse;
    List<UserInfoDto> users;
    List<roleSelection> roleSelections { get; set; } = new List<roleSelection>();

    public string newRoletoAdd { get; set; } = "";

    public UserInfoDto user { get; set; } = new UserInfoDto(); // Holds user being actively modified or created
    RegisterDto registerParameters { get; set; } = new RegisterDto();

    UserProfileDto userProfile = new UserProfileDto();

    public class roleSelection
    {
        public bool Selected { get; set; }
        public string Name { get; set; }
    };

    protected override async Task OnInitializedAsync()
    {
        await RetrieveUserListAsync();
        await PopulateRoleList();

        userProfile = await appState.GetUserProfile();
    }

    protected async Task RetrieveUserListAsync()
    {
        string queryString = "?pageSize=" + pageSize.ToString() + "&pageNumber=" + currentPage.ToString(); // this is to support pagination in the future, need to integrate with MatTable
        apiResponse = await Http.GetJsonAsync<ApiResponseDto>("api/Account" + queryString);

        if (apiResponse.StatusCode == 200)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Users Retrieved");
            users = Newtonsoft.Json.JsonConvert.DeserializeObject<List<UserInfoDto>>(apiResponse.Result.ToString());
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "User Retrieval Failed");
        }
    }

    public async Task ConfirmAction()
    {
        try
        {
            if (creationDialogOpen)
            {
                await CreateUser();
            }
            else if (editDialogOpen)
            {
                await ModifyUserAsync(user);
            }
            else if (deleteUser)
            {
                await DeleteUserSubmit();
            }
            else if (newRoleDialogOpen)
            {
                await CreateRole();
            }
            // if things worked, zero out all the modal switches
            this.confirmDialogOpen = false;
            this.editDialogOpen = false;
            this.creationDialogOpen = false;
            this.deleteUser = false;
            this.newRoleDialogOpen = false;
            await PopulateRoleList();  // get latest version of user list
            StateHasChanged();
        }
        catch (Exception ex)
        {
            matToaster.Add("Error", MatToastType.Danger, ex.InnerException.Message);
        }
    }

    public void OpenEditDialog(Guid userId)
    {
        user = users.Where(x => x.UserId == userId).FirstOrDefault();  // load the user information into the temp user object for worry free editing
        foreach (var role in roleSelections)
        {
            if (user.Roles.Contains(role.Name))
            {
                role.Selected = true;
            }
            else
            {
                role.Selected = false;
            }
        }
        this.editDialogOpen = true;
        StateHasChanged();
    }

    public async Task ModifyUserAsync(UserInfoDto user)
    {
        //update the user object's role list with the new selection set
        user.Roles = roleSelections.Where(x => x.Selected == true).Select(x => x.Name).ToList();

        try
        {
            var apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/Account/ModifyUser", user);
        }
        catch (Exception ex)
        {
            matToaster.Add("Error!", MatToastType.Danger, ex.Message);
        }

        if (apiResponse.StatusCode == 200)
        {
            matToaster.Add("User Updated", MatToastType.Success);
        }
        else
        {
            matToaster.Add("Error", MatToastType.Danger, apiResponse.StatusCode.ToString());
        }
    }

    public async Task OpenDialog(string dialogType)
    {
        switch (dialogType)
        {
            case ("EditUser"):
                this.editDialogOpen = true;
                break;
            case ("CreateUser"):
                this.creationDialogOpen = true;
                break;
            case ("ConfirmAction"):
                this.confirmDialogOpen = true;
                break;
            default:
                break;
        }
        StateHasChanged();
    }

    public async Task CreateUser()
    {
        try
        {
            ApiResponseDto apiResponse = await authStateProvider.Create(registerParameters);
            if (apiResponse.StatusCode == 200)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                user = Newtonsoft.Json.JsonConvert.DeserializeObject<UserInfoDto>(apiResponse.Result.ToString());
                users.Add(user);
                registerParameters = new RegisterDto(); //reset create user object after insert
                creationDialogOpen = false;
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Todo Creation Failed");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "User Creation Failed");
        }
    }

    public async void Delete(Guid userId)
    {
        user.UserId = userId;
        this.deleteUser = true;
        await OpenDialog("ConfirmAction");
        users.Remove(user);
    }

    public async Task DeleteUserSubmit()
    {
        try
        {
            var response = await Http.SendJsonAsync<ApiResponseDto>(HttpMethod.Delete, "api/Account/" + user.UserId, null);
            if (response.StatusCode == 200)
            {
                matToaster.Add("User Deleted", MatToastType.Success);
            }
            else
            {
                throw new Exception(response.ResponseException);
            }
        }
        catch (Exception ex)
        {
            matToaster.Add("Error", MatToastType.Danger, ex.Message);

        }
    }
    async Task PopulateRoleList()
    {
        List<string> roleNames = new List<string>();
        var response = await Http.GetJsonAsync<ApiResponseDto>("api/Account/ListRoles");
        try
        {
            roleNames = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(response.Result.ToString());
        }
        catch (Exception ex)
        {
            matToaster.Add("Error", MatToastType.Danger, ex.Message);
            return;

        }

        roleSelections = new List<roleSelection>();// clear out list

        // initialize selection list with all un-selected
        foreach (string role in roleNames)
        {
            roleSelections.Add(new roleSelection
            {
                Name = role,
                Selected = false
            });
        }
    }

    protected void UpdateChipContactGroups(roleSelection roleSelectionItem)
    {
        roleSelectionItem.Selected = !roleSelectionItem.Selected;

        StateHasChanged();
    }

    public async Task CreateRole()
    {
        if (!String.IsNullOrWhiteSpace(newRoletoAdd))
        {
            try
            {
                apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/Account/AddUserRoleGlobal", newRoletoAdd);
                if (apiResponse.StatusCode == 200)
                {
                    matToaster.Add("Role Added", MatToastType.Success);
                }
                else
                {
                    throw new Exception();
                }
            }
            catch (Exception ex)
            {
                matToaster.Add("Error", MatToastType.Danger, ex.Message);
            }
        }
        else
        {
            matToaster.Add("Error", MatToastType.Danger);
        }
        await PopulateRoleList();
        StateHasChanged();
    }
}
